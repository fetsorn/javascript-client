# TODO
- SchemaCompose
- - getSchemaPaths + getImportRedirects
- AppProject
- - getSchemaPaths = combine all dependencies into a schema
- - getImportRedirects = paths to CLI cache folder
x Schema compose add `import * into ... from ...` syntax
- TypeInfo
- - should we add a "dependencies" array?
- - - could generate code for each package independently...

## codegen thoughts
- migrate schema-bind sub-packages to codegen script format (easy eject)
- start w/o extension, adding optional "binding extensions" is something new that can be added
- Move "app-ts" codegen into schema-bind?
- - question: does having app-ts codegen in schema-bind make sense, since apps don't have schemas?
- - - could make it "import-plugin-ts" and "import-web3api-ts"?
- - - makes me think that this is an oversight in the arch... should apps have schemas? Makes me think they should... aggregate of dependencies...
- - Not sure how to deal with the web3apis & plugins dependencies...
- - could: aggregate into one schema
- - could: codegen for each dependency into its own folder, generate root after.
- - could: create new structure that contains them all?
^^^ this doesn't matter considering the new wrapper-based codegen architecture! Just make it "work" right now for the app scenario, treat it differently from plugin/web3api.
current architecture doesn't make sense to treat them as the same, but the new one will allow for this type of "extendability" through different wrappers.

- see if we can "codegen" the AppProject, which internally combines the schemas...? Could use the "getNamedSchemaPaths" like with the plugin and web3api project?

## Codegen
- CLI codegen-templates mustache file names (should be the name of the file)
- .gen.js files
- - Convert .gen.js files to TypeScript?
- - Using the plugin functions? confusing...
- what's the difference between the mustache files in the CLI vs the mustache templates in the schema-bind project?
- no dynamic imports required, do a static import at compile-time?
- move all binding projects to the codegen script model so they can easily be ejected?
- codegen output/project directory? What is this?

## Test
- move CLI test projects into test-cases/cases/[dapps, plugins, etc]
- create test cases to ensure that each use-case codegens correctly & compiles
- need a dapp test-case to make sure the generated types actually compile and work
- does it break if you use a plugin that's added to the client (and has a schema on the package manifest)?

## Architecture Question
- schema compose
- - Why the if "composed"? Is this needed with the latest changes I made?

## Extension
- Add back extension feature

## CLI Cache
- make sure dependency cache folder is optimized

## Manifest Dependencies
- use "dependencies" within wrapper & plugin manifests?
  - allows us to download deps for the user
  - can throw errors if they aren't found, warnings if they aren't used in schemas, etc

## Logging
- remove "quiet" from project configuration
- - have a global logger that's configured by the command

# Done
x plugins should have props { uri, manifest, namespace }

x uniform codegen (custom script + remove directory)
- x should remove files from output directory when performing codegen (like plugin & codegen commands do)
- x OPTIONS: (1) --manifest-file (2) --codegen-dir (3) --codegen-script (4) --publish-dir
- x what are the rules between manifest props & options? options = overrides? manifest = project config?

x AppProject validateImportUri function

x all command flows are the same (parse arsg, validate args, create/validate/run lib classes, cleanup)

x create separate types for manifest languages "plugin/...", "app/...", "wasm/..."

x "--manifest-file" option
x Merge prealpha-dev

x refactor "localhost:4040/providers"
x refactor middleware, move into system/docker
x create issue: support callback arguments
x finish implementing the new app.ts flow
x remove "extension" for now, add back after types are working

x add web3api.plugin.yaml to the build folder, alongside the package.json file
x !plugin command should output web3api.plugin.yaml to build folder (publish circular dep, should patch this in...)

x have easy to track location for all cache folder strings

x ImportedProject = namespace + URI
x web3api.app.yaml "imports" -> "dependencies"

x move app.ts sanitizeUri function to manifest validator

x external project -> imported project (imports)
x packages -> imports

x Put all projects into their own sub-folder in the cache (./w3/[wrapper, plugin, extern/[plugins, wrappers]])

x TODO: JSON-Schema collection based validator

x schema bind templates
- x should revert most all changes except the export
- x imports have been made less future-proof
- x types-ts.mustache
- - x removed necessary import
- x remove duplicate code (query-ts.mustache & mutation-ts.mustache) and replace with single reusable template
- x export bindings from root file as namespaced (WasmAs, PluginTs, etc)

x typesOnly -> withExtensions
- - make it default to not have extensions, since they require users to know how to configure them. This should be an "additional feature" that users learn about and decide to use / setup within their apps.

x rename "plugin-ts" to "app-ts"?

x rename "dapp" to "app"
