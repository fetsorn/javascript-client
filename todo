# MsgPack Fixing
read_decoder.rs:
- "Known Good" Reference: packages/wasm/as/assembly/msgpack/ReadDecoder.ts
- rename "read_unsigned_int" and "read_signed_int" to "read_u64" and "read_i64"
- properly handle signed integer match cases in "read_u64" (see _readUInt64 in ReadDecoder.ts)
- ensure proper casting of "negative fixed int" in "read_i64" (see _readInt64 in ReadDecoder.ts)
- throw an error for "negative fixed int" in "read_u64", error: "unsigned integer cannot be negative..." (see _readUInt64 in ReadDecoder.ts)
- make sure read_u64 & read_i64 are effectively the same as _readUInt64 & _readInt64
- make sure the underlying buffer we're reading from isn't being needlessly copied to satisfy Rust mutability rules
- remove any unneeded `#[derive(...)]` classes / validate they're all required
- remove `read_nil` from the read interface & ReadDecoder implementation
- ensure `ReadBytesExt::read_...::<BigEndian>(...)` is being used correctly, as BigEndian isn't being used for i8 & u8 (for ex)
- is_next_nil is incorrect, and needs to "peek" at the byte instead of reading it (See isNextNil in ReadDecoder.ts)
- read_bytes_length needs to match readBytesLength in ReadDecoder.ts, there are cases unhandled
- read_array_length needs to match readArrayLength in ReadDecoder.ts, there are cases unhandled
- read_map_length needs to match readMapLength in ReadDecoder.ts, there are cases unhandled

write_encoder.rs:
- "Known Good" Reference: packages/wasm/as/assembly/msgpack/WriteEncoder.ts
- rename "write_unsigned_int" and "write_signed_int" to "write_u64" and "write_i64"
- ensure "write_negative_fixed_int" and "write_positive_fixed_int" work as expected
- ...

# Add "printWithContext"
- start by adding "printWithContext" to read_decoder & write_encoder
- search for all occurances of "printWithContext"
- ensure that we're using "printWithContext" in the same places in our rust run-time + codegen

# After Tests Pass
* merge prealpha-dev
* handleKeywords in rust
* error types for encoder / decoder
* all existing assemblyscript test cases are ported to rust

# TODO
## CI/CD
- ensure the VERSION string is applied to the wasm-rs crate package
- ensure CI + CD workflows are correct

## Env Support
- create the env tests
- add bindings
- run tests

## BigNumber Type Support
- research bignum Rust type
- add bindings
- run tests
