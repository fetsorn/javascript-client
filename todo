# Done
x CLI codegen-templates mustache file names (should be the name of the file)
x .gen.js files
- x Convert .gen.js files to TypeScript?
- x Using the plugin functions? confusing...
x what's the difference between the mustache files in the CLI vs the mustache templates in the schema-bind project?
x no dynamic imports required, do a static import at compile-time?
x move all binding projects to the codegen script model so they can easily be ejected?
x codegen output/project directory? What is this?

x migrate schema-bind sub-packages to codegen script format (easy eject)
- x add support for custom configuration object (will supprot "withExtensions" well)
x Move "app-ts" codegen into schema-bind?
x - makes me think that this is an oversight in the arch... should apps have schemas? Makes me think they should... aggregate of dependencies...

x use the web3api.plugin.yaml setup for web3api.app.yaml? define an "app schema" using imports?
x SchemaCompose
x - getSchemaPaths + getImportRedirects
x AppProject
x - getSchemaPaths = combine all dependencies into a schema
x - getImportRedirects = paths to CLI cache folder
x Schema compose add `import * into ... from ...` syntax

x plugins should have props { uri, manifest, namespace }

x uniform codegen (custom script + remove directory)
- x should remove files from output directory when performing codegen (like plugin & codegen commands do)
- x OPTIONS: (1) --manifest-file (2) --codegen-dir (3) --codegen-script (4) --publish-dir
- x what are the rules between manifest props & options? options = overrides? manifest = project config?

x AppProject validateImportUri function

x all command flows are the same (parse arsg, validate args, create/validate/run lib classes, cleanup)

x create separate types for manifest languages "plugin/...", "app/...", "wasm/..."

x "--manifest-file" option
x Merge prealpha-dev

x refactor "localhost:4040/providers"
x refactor middleware, move into system/docker
x create issue: support callback arguments
x finish implementing the new app.ts flow
x remove "extension" for now, add back after types are working

x add web3api.plugin.yaml to the build folder, alongside the package.json file
x !plugin command should output web3api.plugin.yaml to build folder (publish circular dep, should patch this in...)

x have easy to track location for all cache folder strings

x ImportedProject = namespace + URI
x web3api.app.yaml "imports" -> "dependencies"

x move app.ts sanitizeUri function to manifest validator

x external project -> imported project (imports)
x packages -> imports

x Put all projects into their own sub-folder in the cache (./w3/[wrapper, plugin, extern/[plugins, wrappers]])

x TODO: JSON-Schema collection based validator

x schema bind templates
- x should revert most all changes except the export
- x imports have been made less future-proof
- x types-ts.mustache
- - x removed necessary import
- x remove duplicate code (query-ts.mustache & mutation-ts.mustache) and replace with single reusable template
- x export bindings from root file as namespaced (WasmAs, PluginTs, etc)

x typesOnly -> withExtensions
- - make it default to not have extensions, since they require users to know how to configure them. This should be an "additional feature" that users learn about and decide to use / setup within their apps.

x rename "plugin-ts" to "app-ts"?

x rename "dapp" to "app"
