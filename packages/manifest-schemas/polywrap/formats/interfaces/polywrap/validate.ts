/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/validate-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/validate-ts.mustache,
 * and run node ./scripts/manifest/generateFormatTypes.js to regenerate this file.
 */
import {
  AnyPolywrapManifest,
  PolywrapManifestFormats
} from ".";
import * as Validators from "../../validators";
import schema_0_0_1_prealpha_1 from "@polywrap/polywrap-manifest-schemas/formats/schemas/polywrap/0.0.1-prealpha.1.json";
import schema_0_0_1_prealpha_2 from "@polywrap/polywrap-manifest-schemas/formats/schemas/polywrap/0.0.1-prealpha.2.json";
import schema_0_0_1_prealpha_3 from "@polywrap/polywrap-manifest-schemas/formats/schemas/polywrap/0.0.1-prealpha.3.json";
import schema_0_0_1_prealpha_4 from "@polywrap/polywrap-manifest-schemas/formats/schemas/polywrap/0.0.1-prealpha.4.json";
import schema_0_0_1_prealpha_5 from "@polywrap/polywrap-manifest-schemas/formats/schemas/polywrap/0.0.1-prealpha.5.json";
import schema_0_0_1_prealpha_6 from "@polywrap/polywrap-manifest-schemas/formats/schemas/polywrap/0.0.1-prealpha.6.json";
import schema_0_0_1_prealpha_7 from "@polywrap/polywrap-manifest-schemas/formats/schemas/polywrap/0.0.1-prealpha.7.json";
import schema_0_0_1_prealpha_8 from "@polywrap/polywrap-manifest-schemas/formats/schemas/polywrap/0.0.1-prealpha.8.json";
import schema_0_0_1_prealpha_9 from "@polywrap/polywrap-manifest-schemas/formats/schemas/polywrap/0.0.1-prealpha.9.json";
import { Tracer } from "@polywrap/tracing-js"

import {
  Schema,
  Validator,
  ValidationError,
  ValidatorResult
} from "jsonschema";

type PolywrapManifestSchemas = {
  [key in PolywrapManifestFormats]: Schema | undefined
};

const schemas: PolywrapManifestSchemas = {
  "0.0.1-prealpha.1": schema_0_0_1_prealpha_1,
  "0.0.1-prealpha.2": schema_0_0_1_prealpha_2,
  "0.0.1-prealpha.3": schema_0_0_1_prealpha_3,
  "0.0.1-prealpha.4": schema_0_0_1_prealpha_4,
  "0.0.1-prealpha.5": schema_0_0_1_prealpha_5,
  "0.0.1-prealpha.6": schema_0_0_1_prealpha_6,
  "0.0.1-prealpha.7": schema_0_0_1_prealpha_7,
  "0.0.1-prealpha.8": schema_0_0_1_prealpha_8,
  "0.0.1-prealpha.9": schema_0_0_1_prealpha_9,
};

const validator = new Validator();

Validator.prototype.customFormats.file = Validators.file;
Validator.prototype.customFormats.wasmLanguage = Validators.wasmLanguage;
Validator.prototype.customFormats.yamlFile = Validators.yamlFile;
Validator.prototype.customFormats.graphqlFile = Validators.graphqlFile;
Validator.prototype.customFormats.manifestFile = Validators.manifestFile;
Validator.prototype.customFormats.packageName = Validators.packageName;
Validator.prototype.customFormats.polywrapUri = Validators.polywrapUri;
Validator.prototype.customFormats.schemaFile = Validators.schemaFile;

export const validatePolywrapManifest = Tracer.traceFunc(
  "core: validatePolywrapManifest",
  (
    manifest: AnyPolywrapManifest,
    extSchema: Schema | undefined = undefined
  ): void => {
    const schema = schemas[manifest.format as PolywrapManifestFormats];

    if (!schema) {
      throw Error(`Unrecognized PolywrapManifest schema format "${manifest.format}"\nmanifest: ${JSON.stringify(manifest, null, 2)}`);
    }

    const throwIfErrors = (result: ValidatorResult) => {
      if (result.errors.length) {
        throw new Error([
          `Validation errors encountered while sanitizing PolywrapManifest format ${manifest.format}`,
          ...result.errors.map((error: ValidationError) => error.toString())
        ].join("\n"));
      }
    };

    throwIfErrors(validator.validate(manifest, schema));

    if (extSchema) {
      throwIfErrors(validator.validate(manifest, extSchema));
    }
  }
);
