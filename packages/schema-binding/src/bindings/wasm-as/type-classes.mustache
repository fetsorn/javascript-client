SupportedTypes = {
  "String",
  "Array<${type}>"
  "Map<string,${type}>"
}

input = {
  type: {
    name: String
    props: [
      {
        name: String,
        type: String =
           |
          "{${base_types}: ${type}}"
      }
    ]
  }
}

class {{type.name}} {
  // TODO: properties

  read(reader: Read): void {
    // TODO: deserialize
  }

  write(writer: Write): void {
    writer.writeMapSize({{type.props.length}})
    // TODO: serialize
    // NORMAL case (base types)
    writer.writeString("{{prop.name}}");
    writer.write{{prop.type}}(this.{{prop.name}});

    // ARRAY
    writer.writeString("{{prop.name}}");
    writer.write{{prop.type}}(
      this.{{prop.name}},
      (writer: Write, item: {{prop.itemType.toNativeType()}}) => {
        // TODO: call function to write the type
        writer.write{{prop.type}}(item)
      }
    );
  }

  toBuffer(): ArrayBuffer {
    const sizer = new WriteSizer();
    this.write(sizer);
    const buffer = new ArrayBuffer(sizer.length);
    const encoder = new WriteEncoder(buffer);
    this.write(encoder);
    return buffer;
  }

  fromBuffer(buffer: ArrayBuffer): void {
    const decoder = new ReadDecoder(buffer);
    this.read(decoder);
  }
}
