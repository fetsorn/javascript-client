/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/deserialize-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/deserialize-ts.mustache,
 * and run node ./scripts/manifest/generateFormatTypes.js to regenerate this file.
 */

import {
  WrapManifest,
  AnyWrapManifest,
  migrateWrapManifest,
  validateWrapManifest,
  latestWrapManifestVersion,
} from ".";
import { DeserializeManifestOptions } from "../../";

import { compare } from "semver";
import YAML from "js-yaml";
import { Tracer } from "@polywrap/tracing-js";

export const deserializeWrapManifest = Tracer.traceFunc(
  "core: deserializeWrapManifest",
  (manifest: string, options?: DeserializeManifestOptions): WrapManifest => {
    let anyWrapManifest: AnyWrapManifest | undefined;
    try {
      anyWrapManifest = JSON.parse(manifest) as AnyWrapManifest;
    } catch (e) {
      anyWrapManifest = YAML.safeLoad(manifest) as
      | AnyWrapManifest
      | undefined;
    }

    if (!anyWrapManifest) {
      throw Error(`Unable to parse WrapManifest: ${manifest}`);
    }

    if (!options || !options.noValidate) {
      validateWrapManifest(anyWrapManifest, options?.extSchema);
    }

    anyWrapManifest.__type = "WrapManifest";

    const versionCompare = compare(
      anyWrapManifest.version,
      latestWrapManifestVersion
    );

    if (versionCompare === -1) {
      // Upgrade
      return migrateWrapManifest(anyWrapManifest, latestWrapManifestVersion);
    } else if (versionCompare === 1) {
      // Downgrade
      throw Error(
        `Cannot downgrade wrap.info version ${anyWrapManifest.version}, please upgrade your PolywrapClient package.`
      );
    } else {
      // Latest
      return anyWrapManifest as WrapManifest;
    }
  }
);
