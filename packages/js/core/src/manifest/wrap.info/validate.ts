/* eslint-disable */
/**
 * This file was automatically generated by scripts/manifest/validate-ts.mustache.
 * DO NOT MODIFY IT BY HAND. Instead, modify scripts/manifest/validate-ts.mustache,
 * and run node ./scripts/manifest/generateFormatTypes.js to regenerate this file.
 */
import {
  AnyWrapManifest,
  WrapManifestVersions
} from ".";
import * as Validators from "../validators";
import schema_0_0_1 from "@polywrap/manifest-schemas/wrap.info/0.0.1.json";
import { Tracer } from "@polywrap/tracing-js"

import {
  Schema,
  Validator,
  ValidationError,
  ValidatorResult
} from "jsonschema";

type WrapManifestSchemas = {
  [key in WrapManifestVersions]: Schema | undefined
};

const schemas: WrapManifestSchemas = {
  "0.0.1": schema_0_0_1,
};

const validator = new Validator();

Validator.prototype.customFormats.validType = Validators.validType;

export const validateWrapManifest = Tracer.traceFunc(
  "core: validateWrapManifest",
  (
    manifest: AnyWrapManifest,
    extSchema: Schema | undefined = undefined
  ): void => {
    const schema = schemas[manifest.version as WrapManifestVersions];

    if (!schema) {
      throw Error(`Unrecognized WrapManifest schema format "${manifest.version}"\nmanifest: ${JSON.stringify(manifest, null, 2)}`);
    }

    const throwIfErrors = (result: ValidatorResult) => {
      if (result.errors.length) {
        throw new Error([
          `Validation errors encountered while sanitizing WrapManifest version ${manifest.version}`,
          ...result.errors.map((error: ValidationError) => error.toString())
        ].join("\n"));
      }
    };

    throwIfErrors(validator.validate(manifest, schema));

    if (extSchema) {
      throwIfErrors(validator.validate(manifest, extSchema));
    }
  }
);
