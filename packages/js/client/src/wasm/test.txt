(async () => {
  const DATA_ADDR = 16; // Where the unwind/rewind data structure will live.
  const memory = new WebAssembly.Memory({ initial: 1 });
  let sleeping = false;
  let exports = {
    values: undefined,
    view: undefined,
    imports: undefined,
  }

  const source = await fetch("../out/main.wasm");
  const bufferSource = await source.arrayBuffer()
  const module = await WebAssembly.instantiate(bufferSource, {
    main: {
      sayHello() {
        console.log("Hello from WebAssembly!");
      },
      other: () => {
        console.log("BEFORE")
        exports.values.testSleep()
        console.log("MEANWHILE")
        exports.values.testWakeUp()
        console.log("AFTER")
      },
      sleep: () => {
        if (!sleeping) {
          console.log("...sleep")
          exports.view[DATA_ADDR >> 2] = DATA_ADDR + 8;
          exports.view[(DATA_ADDR + 4) >> 2] = 1024;

          exports.values.asyncify_start_unwind(DATA_ADDR);
          sleeping = true;
        } else {
          // We are called as part of a resume/rewind. Stop sleeping.
          console.log("...resume");
          exports.values.asyncify_stop_rewind();
          sleeping = false;
        }
      },
      wakeUp: () => {
        console.log("...waking")
        sleeping = false;
        exports.values.asyncify_start_rewind(DATA_ADDR);
        exports.values.testOther();
      },
    },
    env: {
      abort(_msg, _file, line, column) {
        console.error("abort called at main.ts:" + line + ":" + column);
      }
    },
  })

  exports.values = module.instance.exports
  exports.view = new Int32Array(exports.values.memory)
  exports.values.testOther()
})()

