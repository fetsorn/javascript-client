#import { Query, Transaction, Action, PublicKey, KeyType, Signature } into Near from "w3://ens/nearPlugin.web3api.eth"

type Query {
"""
    Wallet Query Functions (Implemented, Not Tested)
"""

  requestSignIn(
    contractId: String
    methodNames: [String!]
    successUrl: String
    failureUrl: String
  ): Boolean!

  signOut: Boolean!

  isSignedIn: Boolean!

  getAccountId: String

"""
  RPC Query Functions (Implemented, Tested)
"""

  getBlock(
    blockQuery: BlockReference!
  ): BlockResult!

  getAccountState(
    accountId: String!
  ): Near_AccountView!

  findAccessKey(
    accountId: String!
  ): AccessKeyInfo

  getPublicKey(
    accountId: String!
  ): Near_PublicKey

"""
  RPC Query Functions (Not Implemented)
"""

  # get account balance
  getAccountBalance(
    accountId: String!
  ): AccountBalance!

  # get list of authorized applications
  getAccountDetails(
    accountId: String!
  ): [AccountAuthorizedApp]!


  # get all access keys associated with account
  getAccessKeys(
    accountId: String!
  ): [AccessKeyInfo]!

"""
  Transaction Query Functions (Implemented, Tested)
"""

  # creates a transaction. If signerId is not provided, creates transaction with wallet.
  createTransaction(
    receiverId: String!
    actions: [Near_Action!]!
    signerId: String
  ): Near_Transaction!

  # signs a transaction without wallet
  signTransaction(
    transaction: Near_Transaction!
  ): Near_SignTransactionResult!

"""
  Utility Functions (Not Implemented)
"""

  # takes amount in Near, returns amount in YoctoNear
  parseNearAmount(
    amount: BigInt!
  ): BigInt!

  # takes amount in YoctoNear, returns amount in Near
  formatNearAmount(
    amount: BigInt!
  ): BigInt!
}

type Mutation {

"""
  Generic Mutation Functions (Implemented, Tested)
"""

  # send a JSON RPC to Near node
  sendJsonRpc(
    method: String!
    params: JSON!
  ): JSON!

  # send one or more transactions to NEAR wallet to be signed and executed
  requestSignTransactions(
    # list of transactions to sign
    transactions: [Near_Transaction!]!
    # url NEAR Wallet will redirect to after transaction signing is complete
    callbackUrl: String
    # meta information NEAR Wallet will send back to the application. `meta` will be attached to the `callbackUrl` as a url search param
    meta: String
  ): Boolean!

  # sends a signed transaction and awaits execution
  sendTransaction(
    signedTx: Near_SignedTransaction!
  ): Near_FinalExecutionOutcome!

  # sends a signed transaction and immediately returns transaction hash
  sendTransactionAsync(
    signedTx: Near_SignedTransaction!
  ): String!

  # creates, signs, and sends a transaction without wallet and awaits execution
  signAndSendTransaction(
    receiverId: String!
    actions: [Near_Action!]!
    signerId: String!
  ): Near_FinalExecutionOutcome!

  # creates, signs, and sends a transaction without wallet and immediately returns transaction hash
  signAndSendTransactionAsync(
    receiverId: String!
    actions: [Near_Action!]!
    signerId: String!
  ): String!

"""
  Convenience Mutation Functions (Not Implemented)
"""

# create a new Near account
  createAccount(
    newAccountId: String!
    publicKey: Near_PublicKey! # | String
    amount: BigInt
    signerId: String!
  ): FinalExecutionOutcome!

  # delete Near account and transfer remaining funds to beneficiary
  deleteAccount(
    accountId: String!
    beneficiaryId: String!
    signerId: String!
  ): FinalExecutionOutcome!

  # deploy a contract
  deployContract(
    data: Bytes!
    contractId: String!
    signerId: String!
  ): FinalExecutionOutcome!

  # transfer Near from signer to receiver
  sendMoney(
    amount: BigInt!
    receiverId: String!,
    signerId: String!
  ): FinalExecutionOutcome!

  # call a contract function
  functionCall(
    contractId: String!
    methodName: String!
    args: JSON
    gas: BigInt
    deposit: BigInt
    walletMeta: String
    walletCallbackUrl: String
    SignerId: String
  ): FinalExecutionOutcome!

  # add access key to account
  addKey(
    publicKey: Near_PublicKey! # | String
    contractId: String
    methodNames: [String!],
    amount: BigInt
    signerId: String!
  ): FinalExecutionOutcome!

  # delete access key associated with public key
  deleteKey(
    publicKey: Near_PublicKey! # | String
    signerId: String!
  ): FinalExecutionOutcome!
}


"""
  Query Types
"""

type BlockReference {
  blockId: String
  finality: String
  syncCheckpoint: String
}

type BlockHeader {
  height: BigInt!
  epoch_id: String!
  next_epoch_id: String!
  hash: String!
  prev_hash: String!
  prev_state_root: String!
  chunk_receipts_root: String!
  chunk_headers_root: String!
  chunk_tx_root: String!
  outcome_root: String!
  chunks_included: BigInt!
  challenges_root: String!
  timestamp: BigInt!
  timestamp_nanosec: String!
  random_value: String!
  validator_proposals: [JSON!]!
  chunk_mask: [Boolean!]!
  gas_price: String!
  rent_paid: String!
  validator_reward: String!
  total_supply: String!
  challenges_result: [JSON!]!
  last_final_block: String!
  last_ds_final_block: String!
  next_bp_hash: String!
  block_merkle_root: String!
  approvals: [String]!
  signature: String!
  latest_protocol_version: BigInt!
}

type Chunk {
  chunk_hash: String!
  prev_block_hash: String!
  outcome_root: String!
  prev_state_root: String!
  encoded_merkle_root: String!
  encoded_length: BigInt!
  height_created: BigInt!
  height_included: BigInt!
  shard_id: BigInt!
  gas_used: BigInt!
  gas_limit: BigInt!
  rent_paid: String!
  validator_reward: String!
  balance_burnt: String!
  outgoing_receipts_root: String!
  tx_root: String!
  validator_proposals: [JSON!]!
  signature: String!
}

type BlockResult {
  author: String!
  header: BlockHeader!
  chunks: [Chunk!]!
}

# Should more query results implement this? Should more types of queries be included?
type QueryResponseKind {
  blockHeight: BigInt!
  blockHash: String!
}

# Should this implement QueryResponseKind?
type AccountView implements QueryResponseKind {
  amount: String!
  locked: String!
  codeHash: String!
  storageUsage: BigInt!
  storagePaidAt: BigInt!
}

type AccountBalance {
  total: String!
  stateStaked: String!
  staked: String!
  available: String!
}

type AccountAuthorizedApp {
  contractId: String!
  amount: String!
  publicKey: String!
}

"""
  Mutation Types
"""

type FinalExecutionStatus {
  successValue: String
  failure: JSON
}

type ExecutionStatus {
  successValue: String
  successReceiptId: String
  failure: JSON
}

type ExecutionOutcomeWithId {
  id: String!
  outcome: ExecutionOutcome!
}

# Execution status of a sent transaction
type ExecutionOutcome {
  logs: [String!]!
  receiptIds: [String!]!
  gasBurnt: BigInt!
  status: ExecutionStatus!
}

# Final outcome of a sent transaction
type FinalExecutionOutcome {
  status: FinalExecutionStatus!
  transaction: Transaction!
  transaction_outcome: ExecutionOutcomeWithId!
  receipts_outcome: [ExecutionOutcomeWithId!]!
}

"""
  Common Types
"""

type SignedTransaction {
  transaction: Transaction!
  signature: Near_Signature!
}

# Return value of Mutation.signTransaction(...); contains transaction hash and signed transaction
type SignTransactionResult {
  hash: Bytes!
  signedTx: SignedTransaction!
}