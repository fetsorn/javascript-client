#import { Query, Transaction, Action, PublicKey, KeyType, Signature } into Near from "w3://ens/nearPlugin.web3api.eth"

type Query {
"""
    Wallet Query Functions (Implemented, Not Tested)
"""

  requestSignIn(
    contractId: String
    methodNames: [String!]
    successUrl: String
    failureUrl: String
  ): Boolean!

  signOut: Boolean!

  isSignedIn: Boolean!

  getAccountId: String

"""
  RPC Query Functions not part of JsonRpcProvider (Implemented, Tested)
"""

  getAccountState(
    accountId: String!
  ): AccountView!

  findAccessKey(
    accountId: String!
  ): AccessKeyInfo

  getPublicKey(
    accountId: String!
  ): Near_PublicKey

"""
  RPC Query Functions not part of JsonRpcProvider (Not Implemented)
"""

  # get account balance
  getAccountBalance(
    accountId: String!
  ): AccountBalance!

  # get list of authorized applications
  getAccountDetails(
    accountId: String!
  ): [AccountAuthorizedApp]!

  # get all access keys associated with account
  getAccessKeys(
    accountId: String!
  ): [AccessKeyInfo]!

  # Invoke a contract view function using the RPC API
  viewFunction(
    contractId: String!
    methodName: String!
    args: JSON!
  ): JSON!

  viewContractState(
    prefix: (String | Bytes)!
    blockQuery: BlockReference!
  ): [KeyValuePair]!

"""
  Transaction Query Functions (Implemented, Tested)
"""

  # creates a transaction. If signerId is not provided, creates transaction with wallet.
  createTransaction(
    receiverId: String!
    actions: [Near_Action!]!
    signerId: String
  ): Near_Transaction!

  # signs a transaction without wallet
  signTransaction(
    transaction: Near_Transaction!
  ): SignTransactionResult!

"""
  Utility Functions (Not Implemented)
"""

  # takes amount in Near, returns amount in YoctoNear
  parseNearAmount(
    amount: BigInt!
  ): BigInt!

  # takes amount in YoctoNear, returns amount in Near
  formatNearAmount(
    amount: BigInt!
  ): BigInt!

"""
  JsonRpcProvider Query Functions (Implemented, Tested)
"""

getBlock(
  blockQuery: BlockReference!
): BlockResult!

"""
  JsonRpcProvider Query Functions (Not Implemented)
"""

  status(): NodeStatusResult!

  txStatus(
    txHash: (Bytes | String)!,
    accountId: String!
  ): FinalExecutionOutcome!

  txStatusReceipts(
    txHash: Bytes!
    accountId: String!
  ): FinalExecutionOutcome!

  blockChanges(
    blockQuery: BlockReference!
  ): BlockChangeResult!

  chunk(
    chunkId: (String | [BigInt!])! # chunk hash or [blockId, chunkId]
  ): ChunkResult!

  validators(
    blockId: BigInt
  ):   EpochValidatorInfo!

  experimental_protocolConfig(
    blockReference: BlockReference!
  ):   NearProtocolConfig!

  lightClientProof(
    request: LightClientProofRequest!
  ): LightClientProof!

  accessKeyChanges(
    accountIdArray: [String!]!
    blockQuery: BlockReference!
  ): ChangeResult!

  singleAccessKeyChanges(
    accessKeyArray: [AccessKeyWithPublicKey!]!,
    blockQuery: BlockReference
  ):   ChangeResult

  accountChanges(
    accountIdArray: [String!]!
    blockQuery: BlockReference!
  ): ChangeResult!

  contractStateChanges(
    accountIdArray: [String!]!
    blockQuery: BlockReference!
    keyPrefix: String
  ): ChangeResult!

  contractCodeChanges(
    accountIdArray: [String!]!
    blockQuery: BlockReference!
  ): ChangeResult!

  gasPrice(
    blockId: BigInt
  ): BigInt!
}

"""
  Query Types
"""

type AccountView {
  blockHeight: BigInt!
  blockHash: String!
  amount: String!
  locked: String!
  codeHash: String!
  storageUsage: BigInt!
  storagePaidAt: BigInt!
}

type AccountBalance {
  total: String!
  stateStaked: String!
  staked: String!
  available: String!
}

type AccountAuthorizedApp {
  contractId: String!
  amount: String!
  publicKey: String!
}

type BlockReference {
  blockId: String
  finality: String
  syncCheckpoint: String
}

type BlockHeader {
  height: BigInt!
  epoch_id: String!
  next_epoch_id: String!
  hash: String!
  prev_hash: String!
  prev_state_root: String!
  chunk_receipts_root: String!
  chunk_headers_root: String!
  chunk_tx_root: String!
  outcome_root: String!
  chunks_included: BigInt!
  challenges_root: String!
  timestamp: BigInt!
  timestamp_nanosec: String!
  random_value: String!
  validator_proposals: [JSON!]!
  chunk_mask: [Boolean!]!
  gas_price: String!
  rent_paid: String!
  validator_reward: String!
  total_supply: String!
  challenges_result: [JSON!]!
  last_final_block: String!
  last_ds_final_block: String!
  next_bp_hash: String!
  block_merkle_root: String!
  approvals: [String]!
  signature: String!
  latest_protocol_version: BigInt!
}

type Chunk {
  chunk_hash: String!
  prev_block_hash: String!
  outcome_root: String!
  prev_state_root: String!
  encoded_merkle_root: String!
  encoded_length: BigInt!
  height_created: BigInt!
  height_included: BigInt!
  shard_id: BigInt!
  gas_used: BigInt!
  gas_limit: BigInt!
  rent_paid: String!
  validator_reward: String!
  balance_burnt: String!
  outgoing_receipts_root: String!
  tx_root: String!
  validator_proposals: [JSON!]!
  signature: String!
}

type BlockResult {
  author: String!
  header: BlockHeader!
  chunks: [Chunk!]!
}

type ChunkHeader {
  balance_burnt: String!
  chunk_hash: String!
  encoded_length: BigInt!
  encoded_merkle_root: String!
  gas_limit: BigInt!
  gas_used: String!
  height_created: BigInt!
  height_included: BigInt!
  outgoing_receipts_root: String!
  prev_block_hash: String!
  prev_state_num_parts: BigInt!
  prev_state_root_hash: String!
  rent_paid: String!
  shard_id: BigInt!
  signature: String!
  tx_root: String!
  validator_proposals: [JSON!]!
  validator_reward: String!
}

type ChunkResult {
  header: ChunkHeader!
  receipts: [JSON!]!
  transactions: [Transaction!]!
}

type BlockChange {
  chagneType: String!
  account_id: String!
}

type BlockChangeResult {
  block_hash: String!
  changes: [BlockChange!]!
}

type SyncInfo {
  latest_block_hash: String!
  latest_block_height: BigInt!
  latest_block_time: String!
  latest_state_root: String!
  syncing: Boolean!
}

type Version {
  version: String!
  build: String!
}

type NodeStatusResult {
  chain_id: String!
  rpc_addr: String!
  sync_info: SyncInfo!
  validators: [String!]!
  version: Version!
}

type CurrentEpochValidatorInfo {
  account_id: String!
  public_key: String!
  is_slashed: Boolean!
  stake: String!
  shards: [BigInt!]!
  num_produced_blocks: UInt!
  num_expected_blocks: UInt!
}

type NextEpochValidatorInfo {
  account_id: String!
  public_key: String!
  stake: String!
  shards: [BigInt!]!
}

type ValidatorStakeView {
  account_id: String!
  public_key: String!
  stake: String!
}

type EpochValidatorInfo {
  # Validators for the current epoch.
  next_validators: [NextEpochValidatorInfo!]!
  # Validators for the next epoch.
  current_validators: [CurrentEpochValidatorInfo!]!
  # Fishermen for the current epoch.
  next_fisherman: [ValidatorStakeView!]!
  # Fishermen for the next epoch.
  current_fisherman: [ValidatorStakeView!]!
  # Proposals in the current epoch.
  current_proposals: [ValidatorStakeView!]!
  # Kickout in the previous epoch.
  prev_epoch_kickout: [ValidatorStakeView!]!
  # Epoch start height.
  epoch_start_height: BigInt!
}

type NearProtocolConfig {
  runtime_config: NearProtocolRuntimeConfig!
}

type NearProtocolRuntimeConfig {
  storage_amount_per_byte: String!
}

type MerkleNode {
  hash: String!
  direction: String!
}

type BlockHeaderInnerLiteView {
  height: BigInt!
  epoch_id: String!
  next_epoch_id: String!
  prev_state_root: String!
  outcome_root: String!
  timestamp: BigInt!
  next_bp_hash: String!
  block_merkle_root: String!
}

type LightClientBlockLiteView {
  prev_block_hash: String!
  inner_rest_hash: String!
  inner_lite: BlockHeaderInnerLiteView!
}

type ExecutionOutcomeWithIdView {
  proof: [MerkleNode!]!
  block_hash: String!
  id: String!
  outcome: ExecutionOutcome!
}

type LightClientProof {
  outcome_proof: ExecutionOutcomeWithIdView!
  outcome_root_proof: [MerkleNode!]!
  block_header_lite: LightClientBlockLiteView!
  block_proof: [MerkleNode!]!
}

enum IdType {
  Transaction
  Receipt
}

type LightClientProofRequest {
  type: IdType!
  light_client_head: String!
  transaction_hash: String
  sender_id: String
  receipt_id: String
  receiver_id: String
}

type ChangeResult {
  block_hash: String!
  changes: [JSON!]!
}

type AccessKeyWithPublicKey {
  account_id: String!
  public_key: String!
}

type KeyValuePair {
  key: Bytes
  value: Bytes
}

"""
Common Types
"""

type SignedTransaction {
  transaction: Transaction!
  signature: Near_Signature!
}

# Return value of Mutation.signTransaction(...); contains transaction hash and signed transaction
type SignTransactionResult {
  hash: Bytes!
  signedTx: SignedTransaction!
}

type ExecutionStatus {
  successValue: String
  successReceiptId: String
  failure: JSON
}

type ExecutionOutcomeWithId {
  block_hash: String
  id: String!
  outcome: ExecutionOutcome!
  proof: [ExecutionProof!]
}

type ExecutionProof {
  direction: String!
  hash: String!
}

# Execution status of a sent transaction
type ExecutionOutcome {
  executor_id: String
  gas_burnt: BigInt!
  logs: [String!]
  metadata: OutcomeMetaData
  receipt_ids: [String!]!
  status: ExecutionStatus!
  tokens_burnt: String
}

type OutcomeMetaData {
  gas_profile: [GasProfile]!
  version: UInt!
}

type GasProfile {
  cost: String!
  cost_category: String!
  gas_used: String!
}

# Final outcome of a sent transaction
type FinalExecutionOutcome {
  status: ExecutionStatus!
  transaction: Transaction!
  transaction_outcome: ExecutionOutcomeWithId!
  receipts_outcome: [ExecutionOutcomeWithId!]!
}