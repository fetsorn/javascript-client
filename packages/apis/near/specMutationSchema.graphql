#import { Query, Transaction, Action, PublicKey, Signature } into Near from "w3://ens/nearPlugin.web3api.eth"

type Mutation {

"""
  JsonRpcProvider Mutation Functions (Implemented, Tested)
"""

  # send a JSON RPC to Near node
  sendJsonRpc(
    method: String!
    params: JSON!
  ): JSON!

"""
  Generic Mutation Functions (Implemented, Tested)
"""

  # send one or more transactions to NEAR wallet to be signed and executed
  requestSignTransactions(
    # list of transactions to sign
    transactions: [Near_Transaction!]!
    # url NEAR Wallet will redirect to after transaction signing is complete
    callbackUrl: String
    # meta information NEAR Wallet will send back to the application. `meta` will be attached to the `callbackUrl` as a url search param
    meta: String
  ): Boolean!

  # sends a signed transaction and awaits execution
  sendTransaction(
    signedTx: SignedTransaction!
  ): FinalExecutionOutcome!

  # sends a signed transaction and immediately returns transaction hash
  sendTransactionAsync(
    signedTx: SignedTransaction!
  ): String!

  # creates, signs, and sends a transaction without wallet and awaits execution
  signAndSendTransaction(
    receiverId: String!
    actions: [Near_Action!]!
    signerId: String!
  ): FinalExecutionOutcome!

  # creates, signs, and sends a transaction without wallet and immediately returns transaction hash
  signAndSendTransactionAsync(
    receiverId: String!
    actions: [Near_Action!]!
    signerId: String!
  ): String!

"""
  Convenience Mutation Functions (Not Implemented)
"""

# create a new Near account
  createAccount(
    newAccountId: String!
    publicKey: Near_PublicKey! # | String
    amount: BigInt
    signerId: String!
  ): FinalExecutionOutcome!

  # delete Near account and transfer remaining funds to beneficiary
  deleteAccount(
    accountId: String!
    beneficiaryId: String!
    signerId: String!
  ): FinalExecutionOutcome!

  # deploy a contract
  deployContract(
    data: Bytes!
    contractId: String!
    signerId: String!
  ): FinalExecutionOutcome!

  # transfer Near from signer to receiver
  sendMoney(
    amount: BigInt!
    receiverId: String!,
    signerId: String!
  ): FinalExecutionOutcome!

  # call a contract function
  functionCall(
    contractId: String!
    methodName: String!
    args: JSON
    gas: BigInt
    deposit: BigInt
    walletMeta: String
    walletCallbackUrl: String
    SignerId: String
  ): FinalExecutionOutcome!

  # add access key to account
  addKey(
    publicKey: Near_PublicKey! # | String
    contractId: String
    methodNames: [String!],
    amount: BigInt
    signerId: String!
  ): FinalExecutionOutcome!

  # delete access key associated with public key
  deleteKey(
    publicKey: Near_PublicKey! # | String
    signerId: String!
  ): FinalExecutionOutcome!

  # Create a new account and deploy a contract to it
  createAndDeployContract(
    contractId: String!
    publicKey: (String | Near_PublicKey)!
    data: Bytes!
    amount: BigInt!
  ): Boolean!
}

"""
Common Types
"""

type SignedTransaction {
  transaction: Transaction!
  signature: Near_Signature!
}

# Return value of Mutation.signTransaction(...); contains transaction hash and signed transaction
type SignTransactionResult {
  hash: Bytes!
  signedTx: SignedTransaction!
}

type FinalExecutionStatus {
  successValue: String
  failure: JSON
}

type ExecutionStatus {
  successValue: String
  successReceiptId: String
  failure: JSON
}

type ExecutionOutcomeWithId {
  id: String!
  outcome: ExecutionOutcome!
}

# Execution status of a sent transaction
type ExecutionOutcome {
  logs: [String!]!
  receiptIds: [String!]!
  gasBurnt: BigInt!
  status: ExecutionStatus!
}

# Final outcome of a sent transaction
type FinalExecutionOutcome {
  status: FinalExecutionStatus!
  transaction: Transaction!
  transaction_outcome: ExecutionOutcomeWithId!
  receipts_outcome: [ExecutionOutcomeWithId!]!
}
