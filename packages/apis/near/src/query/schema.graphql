#import { Query, Transaction, Action, PublicKey, KeyType } into Near from "w3://ens/nearPlugin.web3api.eth"

type Query {
  requestSignIn(
    contractId: String
    methodNames: [String!]
    successUrl: String
    failureUrl: String
  ): Boolean!

  signOut: Boolean!

  isSignedIn: Boolean!

  getAccountId: String

  getBlock(
    blockQuery: BlockReference!
  ): BlockResult!

  getAccountState(
    accountId: String!
  ): AccountView!

  findAccessKey(
    accountId: String!
  ): AccessKeyInfo

  getPublicKey(
    accountId: String!
  ): Near_PublicKey

  createTransaction(
    receiverId: String!
    actions: [Near_Action!]!
    signerId: String
  ): Near_Transaction!

  # signs a transaction without wallet
  signTransaction(
    transaction: Near_Transaction!
  ): Near_SignTransactionResult!
}

# Based on these types from near-api-js:
# export type Finality = 'optimistic' | 'near-final' | 'final'
# export type BlockReference = { blockId: BlockId } | { finality: Finality } | { sync_checkpoint: 'genesis' | 'earliest_available' }
type BlockReference {
  blockId: String
  finality: String
  syncCheckpoint: String
}

type BlockHeader {
  height: BigInt!
  epoch_id: String!
  next_epoch_id: String!
  hash: String!
  prev_hash: String!
  prev_state_root: String!
  chunk_receipts_root: String!
  chunk_headers_root: String!
  chunk_tx_root: String!
  outcome_root: String!
  chunks_included: BigInt!
  challenges_root: String!
  timestamp: BigInt!
  timestamp_nanosec: String!
  random_value: String!
  validator_proposals: [JSON!]!
  chunk_mask: [Boolean!]!
  gas_price: String!
  rent_paid: String!
  validator_reward: String!
  total_supply: String!
  challenges_result: [JSON!]!
  last_final_block: String!
  last_ds_final_block: String!
  next_bp_hash: String!
  block_merkle_root: String!
  approvals: [String]!
  signature: String!
  latest_protocol_version: BigInt!
}

type Chunk {
  chunk_hash: String!
  prev_block_hash: String!
  outcome_root: String!
  prev_state_root: String!
  encoded_merkle_root: String!
  encoded_length: BigInt!
  height_created: BigInt!
  height_included: BigInt!
  shard_id: BigInt!
  gas_used: BigInt!
  gas_limit: BigInt!
  rent_paid: String!
  validator_reward: String!
  balance_burnt: String!
  outgoing_receipts_root: String!
  tx_root: String!
  validator_proposals: [JSON!]!
  signature: String!
}

type BlockResult {
  author: String!
  header: BlockHeader!
  chunks: [Chunk!]!
}

# All query responses implement QueryResponseKind
type QueryResponseKind {
  blockHeight: BigInt!
  blockHash: String!
}

type AccountView implements QueryResponseKind {
  amount: String!
  locked: String!
  codeHash: String!
  storageUsage: BigInt!
  storagePaidAt: BigInt!
}

# Access key permissions determine how an account is allow to interact with a contract
type AccessKeyPermission {
  isFullAccess: Boolean!
  receiverId: String
  methodNames: [String!]
  allowance: BigInt
}

type AccessKey {
  nonce: BigInt!
  permission: AccessKeyPermission!
}

# Access keys contain access key permissions, which determine how an account is allowed to interact with a contract
type AccessKeyInfo {
  publicKey: Near_PublicKey!
  accessKey: AccessKey!
}