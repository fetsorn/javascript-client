// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {TypedMap, Entity, Value, ValueKind, store, Address, Bytes, BigInt, BigDecimal} from '@graphprotocol/graph-ts';

export class SimpleStorage extends Entity {
  constructor(id: string) {
    super();
    this.set('id', Value.fromString(id));
  }

  save(): void {
    const id = this.get('id');
    assert(id !== null, 'Cannot save SimpleStorage entity without an ID');
    assert(
      id.kind == ValueKind.STRING,
      'Cannot save SimpleStorage entity with non-string ID. ' +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set('SimpleStorage', id.toString(), this);
  }

  static load(id: string): SimpleStorage | null {
    return store.get('SimpleStorage', id) as SimpleStorage | null;
  }

  get id(): string {
    const value = this.get('id');
    return value.toString();
  }

  set id(value: string) {
    this.set('id', Value.fromString(value));
  }

  get lastSetBy(): Bytes | null {
    const value = this.get('lastSetBy');
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set lastSetBy(value: Bytes | null) {
    if (value === null) {
      this.unset('lastSetBy');
    } else {
      this.set('lastSetBy', Value.fromBytes(value as Bytes));
    }
  }
}
